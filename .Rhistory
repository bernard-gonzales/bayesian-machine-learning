risk_vs_prob <- data.frame(score = risk$score, predicted_prob = results$predicted_probabilities, lower_bound = results$lower_bound,
upper_bound = results$upper_bound, race = risk$race)
aggregated_data <- risk_vs_prob %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
ggplot(aggregated_data, aes(x = score, y = predicted_prob)) +
geom_point(data = risk_vs_prob, mapping = aes(x = score, y = predicted_prob)) +
geom_line(color = 'red') +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(x = "Risk Score", y = "Predicted Probability")
races <- unique(risk_vs_prob$race)
for (r in races) {
aggregated_data <- risk_vs_prob %>%
filter(race == r)
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(risk_vs_prob, aes(x = score, y = predicted_prob)) +
geom_point() +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
aggregated_data <- risk_vs_prob %>%
filter(race == r) %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(risk_vs_prob, aes(x = score, y = predicted_prob)) +
geom_point() +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
aggregated_data <- risk_vs_prob %>%
filter(race == r) %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(aggregated_data, aes(x = score, y = predicted_prob)) +
geom_point() +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
aggregated_data <- risk_vs_prob %>%
filter(race == r) %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(aggregated_data, aes(x = score, y = predicted_prob)) +
geom_point(data = risk_vs_prob, mapping = aes(x = score, y = predicted_prob)) +
geom_line(color = 'red') +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
per_race <- risk_vs_prob %>%
filter(race == r)
aggregated_data <- per_race %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(aggregated_data, aes(x = score, y = predicted_prob)) +
geom_point(data = risk_vs_prob, mapping = aes(x = score, y = predicted_prob)) +
geom_line(color = 'red') +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
per_race <- risk_vs_prob %>%
filter(race == r)
aggregated_data <- per_race %>%
group_by(score) %>%
summarize(
predicted_prob = mean(predicted_prob),
lower_bound = mean(lower_bound),
upper_bound = mean(upper_bound)
)
p <- ggplot(aggregated_data, aes(x = score, y = predicted_prob)) +
geom_point(data = per_race, mapping = aes(x = score, y = predicted_prob)) +
geom_line(color = 'red') +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound), alpha = 0.2) +
labs(title = r, x = "Risk Score", y = "Predicted Probability")
print(p)
}
dir_data= 'https://mdporter.github.io/teaching/data/' # data directory
library(tidyverse)  # functions for data manipulation
library(ggplot2)
library(pROC)
data_split <- split(risk_vs_prob, risk_vs_prob$race)
roc_list <- map(data_split, ~ roc(response = .x$outcome, predictor = .x$predicted_prob))
roc_list <- list()
for (race in race_groups) {
data_subset <- subset(risk_vs_prob, race == race)
data_subset$outcome <- as.numeric(as.character(data_subset$outcome))
roc_obj <- roc(response = data_subset$outcome, predictor = data_subset$predicted_prob)
roc_list[[as.character(race)]] <- roc_obj
}
roc_list <- list()
for (race in races) {
data_subset <- subset(risk_vs_prob, race == race)
data_subset$outcome <- as.numeric(as.character(data_subset$outcome))
roc_obj <- roc(response = data_subset$outcome, predictor = data_subset$predicted_prob)
roc_list[[as.character(race)]] <- roc_obj
}
library(pROC)
lin_prediction <- predict(linear, x)
set.seed(2020)
alpha <- 0.5
x <- as.matrix(linkage_train[, -c(9)])
linkage_test <- read.csv('linkage_test.csv')
linkage_train <- read.csv('linkage_train.csv')
set.seed(2020)
alpha <- 0.5
x <- as.matrix(linkage_train[, -c(9)])
y <- linkage_train[,9]
linear <- cv.glmnet(x, y, alpha = 0.5, lambda = seq(0.0002, 10))
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
dir_data= 'https://mdporter.github.io/teaching/data/' # data directory
library(glmnet)
library(tidyverse) # functions for data manipulation
library(randomForest)
linkage_test <- read.csv('linkage_test.csv')
linkage_train <- read.csv('linkage_train.csv')
set.seed(2020)
alpha <- 0.5
x <- as.matrix(linkage_train[, -c(9)])
y <- linkage_train[,9]
linear <- cv.glmnet(x, y, alpha = 0.5, lambda = seq(0.0002, 10))
set.seed(2020)
logistic <- cv.glmnet(x, y, alpha = 0.5, family = 'binomial', lambda = seq(0.00001, 10))
set.seed(2020)
imp <- 'impurity'
random_forest <- randomForest(y ~ ., data = linkage_train)
random_forest
library(pROC)
lin_prediction <- predict(linear, x)
log_prediction <- predict(logistic, x)
rand_for_prediction <- predict(random_forest, x)
lin_roc <- roc(response = y, predictor = lin_prediction)
log_roc <- roc(response = y, predictor = log_prediction)
rand_for_roc <- roc(response = y, predictor = rand_for_prediction)
roc_dat <- data.frame(
TPR = c(lin_roc$sensitivities, log_roc$sensitivities, rand_for_roc$sensitivities),
FPR = c(1 - lin_roc$specificities, 1 - log_roc$specificities, 1 - rand_for_roc$specificities),
Model = factor(rep(c("Linear", "Logistic", "Random Forest"),
times = c(length(lin_roc$sensitivities),
length(log_roc$sensitivities),
length(rand_for_roc$sensitivities))))
)
ggplot(roc_dat, aes(x = FPR, y = TPR, color = Model)) +
geom_line(size = 1) +
labs(title = "ROC Curves for Linear, Logistic, and Random Forest Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)")
for (race in races) {
data_subset <- subset(risk_vs_prob, race == race)
data_subset$outcome <- as.numeric(as.character(data_subset$outcome))
roc_obj <- roc(response = data_subset$outcome, predictor = data_subset$predicted_prob)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = race)
print(p)
}
for (r in races) {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
predictions <- predict(recid_race, risk[, -c(8)], type = 'response')
roc_obj <- roc(response = data_subset$outcome, predictor = predictions)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
for (r in races) {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
predictions <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = data_subset$outcome, predictor = predictions)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
predictions <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = data_subset$outcome, predictor = predictions)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
preds <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = data_subset$outcome, predictor = preds)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
preds <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = risky$outcome, predictor = preds)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
if (r != 'Native American') {}
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
preds <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = risky$outcome, predictor = preds)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
races <- unique(risk_vs_prob$race)
for (r in races) {
if (r != 'Native American') {
risky <- risk %>%
filter(race == r)
recid_race <- glm(outcome ~ age + charge + sex + priors_count + score, family = 'binomial', data = risky)
preds <- predict(recid_race, risky[, -c(8)], type = 'response')
roc_obj <- roc(response = risky$outcome, predictor = preds)
roc_dat <- data.frame(
TPR = roc_obj$sensitivities,
FPR = 1 - roc_obj$specificities)
p <- ggplot(roc_dat, aes(x = FPR, y = TPR)) +
geom_line() +
labs(title = r)
print(p)
}
}
library(ggplot2)
library(dplyr)
library(dirmult)
library(bayestestR)
library(rstan)
un_alpha <- 1
un_beta <- 1
un_alc_ex_alpha <- un_alpha + n
library(ggplot2)
library(dplyr)
library(dirmult)
library(bayestestR)
library(rstan)
white_wine <- read.csv('whitewine-training-ds6040.csv')
ggplot(white_wine, aes(alcohol)) +
geom_density()
alc_mu <- mean(white_wine$alcohol)
alc_sig2 <- var(white_wine$alcohol)
ph_mu <- mean(white_wine$pH)
ph_sig2 <- var(white_wine$pH)
cat("alcohol mean:", alc_mu, "\nalcohol variance:", alc_sig2, "\npH mean:", ph_mu, "\npH variance:", ph_sig2)
n <- 3178
mu0 <- 0
sig02 <- 1000^2
mu_posterior <- function(n, mu, sig2, mu0, sig02) {
(sig2*mu0 + n*sig02*mu) / (n*sig02 + sig2)
}
sigma2_posterior <- function(n, sig2, sig02) {
1 / (n/sig2 + 1/sig02)
}
un_alc_mu_post <- mu_posterior(n = n, mu = alc_mu, sig2 = alc_sig2, mu0 = mu0, sig02 = sig02)
un_alc_sig2_post <- sigma2_posterior(n = n, sig2 = alc_sig2, sig02 = sig02)
un_ph_mu_post <- mu_posterior(n = n, mu = ph_mu, sig2 = ph_sig2, mu0 = mu0, sig02 = sig02)
un_ph_sig2_post <- sigma2_posterior(n = n, sig2 = ph_sig2, sig02 = sig02)
cat("Uninformative Priors:\nalcohol posterior distribution ~ N(", un_alc_mu_post, ",", un_alc_sig2_post, ")\npH posterior distribution ~ N(", un_ph_mu_post, ",", un_ph_sig2_post, ")")
mu0 <- 1
sig02 <- 0.25^2
in_alc_mu_post <- mu_posterior(n = n, mu = alc_mu, sig2 = alc_sig2, mu0 = mu0, sig02 = sig02)
in_alc_sig2_post <- sigma2_posterior(n = n, sig2 = alc_sig2, sig02 = sig02)
in_ph_mu_post <- mu_posterior(n = n, mu = ph_mu, sig2 = ph_sig2, mu0 = mu0, sig02 = sig02)
in_ph_sig2_post <- sigma2_posterior(n = n, sig2 = ph_sig2, sig02 = sig02)
cat("Informative Priors:\nalcohol posterior distribution ~ N(", in_alc_mu_post, ",", in_alc_sig2_post, ")\npH posterior distribution ~ N(", in_ph_mu_post, ",", in_ph_sig2_post, ")")
un_alpha <- 1
un_beta <- 1
un_alc_ex_alpha <- un_alpha + n
un_alc_ex_beta <- un_beta + sum(white_wine$alcohol)
un_ph_ex_alpha <- un_alpha + n
un_ph_ex_beta <- un_beta + sum(white_wine$pH)
cat("Uninformative Priors:\nalcohol posterior distribution ~ Gamma(", un_alc_ex_alpha, ",", un_alc_ex_beta, ")\npH posterior distribution ~ Gamma(", un_ph_ex_alpha, ",", un_ph_ex_beta, ")")
in_alpha <- 1000
in_beta <- 1000
in_alc_ex_alpha <- in_alpha + n
in_alc_ex_beta <- in_beta + sum(white_wine$alcohol)
in_ph_ex_alpha <- in_alpha + n
in_ph_ex_beta <- in_beta + sum(white_wine$pH)
cat("Informative Priors:\nalcohol posterior distribution ~ Gamma(", in_alc_ex_alpha, ",", in_alc_ex_beta, ")\npH posterior distribution ~ Gamma(", in_ph_ex_alpha, ",", in_ph_ex_beta, ")")
sum(white_wine$alcohol)
sum(white_wine$pH)
in_alpha <- 1000
in_beta <- 1000
in_alc_ex_alpha <- in_alpha + n
in_alc_ex_beta <- in_beta + sum(white_wine$alcohol)
in_ph_ex_alpha <- in_alpha + n
in_ph_ex_beta <- in_beta + sum(white_wine$pH)
cat("Informative Priors:\nalcohol posterior distribution ~ Gamma(", in_alc_ex_alpha, ",", in_alc_ex_beta, ")\npH posterior distribution ~ Gamma(", in_ph_ex_alpha, ",", in_ph_ex_beta, ")")
knitr::opts_chunk$set(echo = TRUE)
#Make sure you install the Rmpfr library
library(Rmpfr)
install.packages("Rmpfr")
#Make sure you install the Rmpfr library
library(Rmpfr)
dat = read.csv("coaldisasters-ds6040.csv")
View(dat)
sum(dat$Count[1:2])
sum(dat$Count[1:4])
#Make sure you install the Rmpfr library
library(Rmpfr)
dat = read.csv("coaldisasters-ds6040.csv")
gibbs_sampler = function(iter, dat, a_mu, b_mu, a_lambda, b_lambda){
mu_vec = vector()
lambda_vec = vector()
k_prob_mat = matrix(nrow = iter+1, ncol = 111)
k_samp_vec = vector()
#Initialize sampler
mu_vec[1] = rgamma(1,a_mu, rate  = b_mu)
lambda_vec[1] = rgamma(1,a_lambda, rate = b_lambda)
k_prob_mat[1,] = rep(1/111, 111)
k_samp_vec[1] = 56
#Sampler
for(i in 2:(iter+1)){
k = k_samp_vec[i-1]
mu_vec[i] = rgamma(1, a_mu + sum(dat$Count[1:k, 2]), rate = k + b_mu)
lambda_vec[i] = rgamma(1, a_lambda + sum(dat$Count[(k+1):112, 2]), rate = 112 - k + b_lambda)
l_temp = vector()
for(j in 1:111){
l_temp[j] = sum(log(mpfr(dpois(dat[1:j,2], lambda = rep(mu_vec[i],j)), precBits = 100))) + sum(log(mpfr(dpois(dat[(j+1):112,2], lambda = rep(lambda_vec[i],112-j)), precBits = 100)))
}
l_temp <- mpfr(l_temp, precBits = 100)
k_prob_mat[i,] = as.numeric(exp(l_temp)/sum(exp(l_temp)))
k_samp_vec[i] = sample(size = 1,1:111, prob = k_prob_mat[i,])
}
toReturn = data.frame(mu = mu_vec, lambda = lambda_vec, k = k_samp_vec)
return(toReturn)
}
test = gibbs_sampler(1000, dat, a_mu = 1, b_mu = 1, a_lambda = 1, b_lambda = 1)
#Make sure you install the Rmpfr library
library(Rmpfr)
dat = read.csv("coaldisasters-ds6040.csv")
gibbs_sampler = function(iter, dat, a_mu, b_mu, a_lambda, b_lambda){
mu_vec = vector()
lambda_vec = vector()
k_prob_mat = matrix(nrow = iter+1, ncol = 111)
k_samp_vec = vector()
#Initialize sampler
mu_vec[1] = rgamma(1,a_mu, rate  = b_mu)
lambda_vec[1] = rgamma(1,a_lambda, rate = b_lambda)
k_prob_mat[1,] = rep(1/111, 111)
k_samp_vec[1] = 56
#Sampler
for(i in 2:(iter+1)){
k = k_samp_vec[i-1]
mu_vec[i] = rgamma(1, a_mu + sum(dat$Count[1:k]), rate = k + b_mu)
lambda_vec[i] = rgamma(1, a_lambda + sum(dat$Count[(k+1):112]), rate = 112 - k + b_lambda)
l_temp = vector()
for(j in 1:111){
l_temp[j] = sum(log(mpfr(dpois(dat[1:j,2], lambda = rep(mu_vec[i],j)), precBits = 100))) + sum(log(mpfr(dpois(dat[(j+1):112,2], lambda = rep(lambda_vec[i],112-j)), precBits = 100)))
}
l_temp <- mpfr(l_temp, precBits = 100)
k_prob_mat[i,] = as.numeric(exp(l_temp)/sum(exp(l_temp)))
k_samp_vec[i] = sample(size = 1,1:111, prob = k_prob_mat[i,])
}
toReturn = data.frame(mu = mu_vec, lambda = lambda_vec, k = k_samp_vec)
return(toReturn)
}
test = gibbs_sampler(1000, dat, a_mu = 1, b_mu = 1, a_lambda = 1, b_lambda = 1)
View(test)
library(tidyverse)
library(tidyverse)
test$index <- 1:301
library(tidyverse)
test$index <- 1:1001
ggplot(test，aes(x = index, y = mu)) +
library(tidyverse)
test$index <- 1:1001
ggplot(test, aes(x = index, y = mu)) +
geom_point() +
geom_line()
ggplot(test, aes(x = index, y = lambda)) +
geom_point() +
geom_line()
ggplot(test, aes(x = index, y = k)) +
geom_point() +
geom_line()
library(tidyverse)
test$index <- 1:1001
ggplot(test, aes(x = index, y = mu)) +
geom_density()
library(tidyverse)
test$index <- 1:1001
ggplot(test$mu) +
geom_density()
library(tidyverse)
test$index <- 1:1001
ggplot(test, aes(mu)) +
geom_density()
ggplot(test, aes(lambda)) +
geom_density()
ggplot(test, aes(k)) +
geom_density()
knitr::opts_chunk$set(echo = TRUE)
#Make sure you install the Rmpfr library
library(Rmpfr)
dat = read.csv("coaldisasters-ds6040.csv")
gibbs_sampler = function(iter, dat, a_mu, b_mu, a_lambda, b_lambda){
mu_vec = vector()
lambda_vec = vector()
k_prob_mat = matrix(nrow = iter+1, ncol = 111)
k_samp_vec = vector()
#Initialize sampler
mu_vec[1] = rgamma(1,a_mu, rate  = b_mu)
lambda_vec[1] = rgamma(1,a_lambda, rate = b_lambda)
k_prob_mat[1,] = rep(1/111, 111)
k_samp_vec[1] = 56
#Sampler
for(i in 2:(iter+1)){
k = k_samp_vec[i-1]
mu_vec[i] = rgamma(1, a_mu + sum(dat$Count[1:k]), rate = k + b_mu)
lambda_vec[i] = rgamma(1, a_lambda + sum(dat$Count[(k+1):112]), rate = 112 - k + b_lambda)
l_temp = vector()
for(j in 1:111){
l_temp[j] = sum(log(mpfr(dpois(dat[1:j,2], lambda = rep(mu_vec[i],j)), precBits = 100))) + sum(log(mpfr(dpois(dat[(j+1):112,2], lambda = rep(lambda_vec[i],112-j)), precBits = 100)))
}
l_temp <- mpfr(l_temp, precBits = 100)
k_prob_mat[i,] = as.numeric(exp(l_temp)/sum(exp(l_temp)))
k_samp_vec[i] = sample(size = 1,1:111, prob = k_prob_mat[i,])
}
toReturn = data.frame(mu = mu_vec, lambda = lambda_vec, k = k_samp_vec)
return(toReturn)
}
test = gibbs_sampler(1000, dat, a_mu = 1, b_mu = 1, a_lambda = 1, b_lambda = 1)
write.csv(test, 'gibbs_sampler.csv')
setwd("~/")
setwd("C:/Users/berna/bayesian machine learning")
knitr::opts_chunk$set(echo = TRUE)
wine <- read.csv('whitewine-training-ds6040.csv')
View(wine)
wine$a <- ifelse(wine$wine_quality == 'A', 1, 0)
